// Mocks generated by Mockito 5.1.0 from annotations
// in lab0_tested_base/test/src/authentication/authentication_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:lab0_tested_base/src/authentication/authentication_controller.dart'
    as _i3;
import 'package:lab0_tested_base/src/authentication/authentication_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [AuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationService extends _i1.Mock
    implements _i2.AuthenticationService {
  MockAuthenticationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set controller(_i3.AuthenticationController? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> signInWithPassword(_i2.AuthenticationModel? model,
          void Function(Exception)? errorCallback) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithPassword, [model, errorCallback]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> registerWithPassword(_i2.AuthenticationModel? model,
          void Function(Exception)? errorCallback) =>
      (super.noSuchMethod(
          Invocation.method(#registerWithPassword, [model, errorCallback]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void logOutCurrentUser() =>
      super.noSuchMethod(Invocation.method(#logOutCurrentUser, []),
          returnValueForMissingStub: null);
}
